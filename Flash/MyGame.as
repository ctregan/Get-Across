package  {	import org.flixel.*	import org.flixel.data.FlxMouse;	import playerio.*	import sample.ui.Prompt	import sample.ui.Chat	import sample.ui.Lobby	/**	 * ...	 * @author Charlie Regan	 */	public class MyGame extends FlxState	{		[Embed(source = "data/map_data.txt", mimeType = "application/octet-stream")] public var data_map:Class;		[Embed(source = "data/testTileSet.png")] public var data_tiles:Class;		[Embed(source = "data/Cursor.png")] public var cursor_img:Class;		private var apInfo:FlxText;		private var myPlayer:Player;		private var myMouse:FlxMouse;		private var errorMessage:FlxText;		private var secCounter:FlxText;		private var location:FlxText;		private var mouseLocation:FlxText;		private var counter:Number;		private var goals:FlxText;		private var abilities:FlxText;		public static var myMap:FlxTilemap;				public static var lyrStage:FlxGroup;        public static var lyrSprites:FlxGroup;        public static var lyrHUD:FlxGroup;				private var lobby:Lobby		private var connection:Connection		private var imPlayer:int;		private var infoBox:InfoBox;				public function PlayState():void		{			super();			boardSetup();						new Prompt(FlxG.stage, "What's your name?", "Guest-" + (Math.random()*9999<<0), function(name:String){				PlayerIO.connect(					FlxG.stage,								//Referance to stage					"getacross-rny1binyakgosozwy0h8wg",			//Game id (Get your own at playerio.com. 1: Create user, 2:Goto admin pannel, 3:Create game, 4: Copy game id inside the "")					"public",							//Connection id, default is public					name,								//Username					"",									//User auth. Can be left blank if authentication is disabled on connection					null,								//Current PartnerPay partner.					handleConnect,						//Function executed on successful connect					handleError							//Function executed if we recive an error				);   			})								}				override public function update():void 		{			counter -= FlxG.elapsed;			if (counter <= 0)			{				// After 15 seconds has passed, the timer will reset.				//myPlayer.AP++;				counter = 15;			}			//Update HUD Information			secCounter.text = counter.toPrecision(3) + " Sec until AP";			if(myPlayer != null){				apInfo.text = "AP:" + myPlayer.AP;				location.text = "(" + myPlayer.xPos + "," + myPlayer.yPos + ")";				errorMessage.text = "" + myPlayer.errorMessage;			}else {				errorMessage.text = "Loading Player Information";			}			mouseLocation.text = tileInformation(myMap.getTile(myMouse.x / 32, myMouse.y / 32));			super.update();		}				//Give a tile number and return information String about that Tile		private function tileInformation(type:Number):String		{			if (type == 1) {				return "Hill (Travel Cost = 3AP)";			}else if (type == 2) {				return "Tree (Travel Cost = 1AP)";			}else if (type == 3) {				return "Cherry Tree (Travel Cost = 1AP)";			}else if (type == 4) {				return "Water (Impassible without help)";			}else if (type == 0) {				return "Land (Travel Cost = 1AP)";			}else if (type == 5 ) {				return "End Point (Reach here to win!)";			}else{				return "Unkown Land Type";			}					}				private function boardSetup():void 		{			counter = 15; //15 sec/1ap						//Different Layers			lyrStage = new FlxGroup; //Map exists here            lyrSprites = new FlxGroup; //Character Sprites exist here            lyrHUD = new FlxGroup; //HUD elements exist here			myMouse = FlxG.mouse;						//Tile Map			myMap = new FlxTilemap();			myMap.drawIndex = 0;			myMap.loadMap(new data_map, data_tiles, 32, 32);			myMap.collideIndex = 1;			lyrStage.add(myMap);									//Bottom HUD			apInfo = new FlxText(0, (myMap.height), 100, "AP:", true);			errorMessage = new FlxText(0, myMap.height + 20, 120, "Errors Appear Here", true);			location = new FlxText(150, myMap.height, 100, "(0,0)", true);			mouseLocation = new FlxText(150, myMap.height + 20, 200, "(0,0)", true);			secCounter = new FlxText(200, myMap.height, 100, "15 Sec until AP", true);						//Right Side HUD			goals = new FlxText(myMap.width, 0, 100, "Goals:\nReach the Red Star", true); 			goals.frameHeight = 75;			abilities = new FlxText(myMap.width, 80, 100, "Abilities:", true);						lyrHUD.add(abilities);			lyrHUD.add(goals);			lyrHUD.add(secCounter);			lyrHUD.add(location);			lyrHUD.add(errorMessage);			lyrHUD.add(apInfo);			lyrHUD.add(mouseLocation);								this.add(lyrStage);            this.add(lyrSprites);            this.add(lyrHUD);		}				//**************************************************************		//********************PlayIO Functions**************************		//**************************************************************				private function handleConnect(client:Client):void{			trace("Sucessfully connected to player.io");									//Set developmentsever (Comment out to connect to your server online)			client.multiplayer.developmentServer = "127.0.0.1:8184";						//Create lobby			lobby = new Lobby(client, "getAcross", handleJoin, handleError)						//Show lobby (parsing true hides the cancel button)			lobby.show(true);						//gotoAndStop(2); //Tbis is pure Flash, need to change this to AS3 (not sure the equivalent							}				private function handleJoin(connection:Connection):void{			trace("Sucessfully connected to the multiplayer server");								infoBox = new InfoBox(resetGame,joinGame);			addChild(infoBox)						infoBox.Show("waiting");												this.connection = connection;			//Add chat to game			var chat:Chat = new Chat(stage, connection);									connection.addMessageHandler("init", function(m:Message, iAm:int, name:String){				imPlayer = iAm;				connection.send("playerInfo", imPlayer);			})						connection.addMessageHandler("playerInfo", function(m:Message, posX:int, posY:int) {				if(myPlayer == null){					myPlayer = new Player(posX, posY);					lyrSprites.add(myPlayer);				}							})								}			private function resetGame():void{			connection.send("reset");			infoBox.Show("waiting");		}				private function joinGame():void{			trace("send join")			connection.send("join");			infoBox.Show("waiting");		}						private function handleMessages(m:Message){			trace("Recived the message", m)		}				private function handleDisconnect():void{			trace("Disconnected from server")		}				private function handleError(error:PlayerIOError):void{			trace("Got", error)			FlxG.state = new LoginState();		}			}