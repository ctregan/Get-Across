package sample.ui{	import flash.display.Sprite	import flash.display.Stage	import flash.events.Event	import flash.sampler.Sample;	import flash.text.TextFormatAlign	import org.flixel.FlxState;	import org.flixel.FlxG;	import org.flixel.FlxText;	import org.flixel.*;	import org.flixel.system.input.Input;	import playerio.*;		import flash.events.MouseEvent		//import sample.ui.components.*	public class Login extends FlxState {				private var _stage:FlxState;			//Stage where UI elements should be placed				private var base:FlxSprite; 			//Box that contains all visual elements				private var usernameLabel:FlxText;		// labels for inputs		private var passwordLabel:FlxText;				private var usernameInput:FlxInputText; 	//Label where username is input		private var passwordInput:FlxInputText; 	//Label where password is input						private var uInput:FlxText;				private var loginButton:FlxButton;				private var errorMessage:FlxText;							private var myClient:Client;		private var _string:String;		private var _inputs:Array = new Array("","");		private var _in:Input;				private var _inputtingUsername:Boolean;				function Login(stage:FlxState) {			super();			// Field names/labels (on left)			_string = "";			_inputtingUsername = true;			usernameLabel = new FlxText(20, 40, 100, "Username:");			passwordLabel = new FlxText(20, 70, 100, "Password:");			add(usernameLabel);			add(passwordLabel);							usernameInput = new FlxInputText(100, 40, 200, 200, "");			add(usernameInput);						passwordInput = new FlxInputText(100, 70, 200, 200, "");			add(passwordInput);							// login button			loginButton = new FlxButton(300, 100, "Continue", attemptLogin);			add(loginButton);						//Errors - on the bottom			errorMessage = new FlxText(20, 130, 300, "error message");// ("", 12, TextFormatAlign.RIGHT,  0xff0000);			add(errorMessage);		}				public function Show(e:Event = null):void{			//_stage.addChild(this);			//_stage.addEventListener(Event.RESIZE, realign)			realign()		}				public function Hide(e:Event = null):void{ 			//_stage.removeChild(this);			//_stage.removeEventListener(Event.RESIZE, realign)		}				private function realign(e:Event = null){						//base.reset();			//base.width = _stage.width			//base.height = _stage.height					}		//Attempt to log user in using playerIO simple connect		private function attemptLogin():void 		{			trace(usernameInput.text);			trace(passwordInput.text);			trace("in attemptLogin()\n");				PlayerIO.quickConnect.simpleConnect(				FlxG.stage,				"get-across-ynrpgn4egdtvzlz3wg8w", //Game ID, taken from PlayerIO website				usernameInput.text, //Login Name, want to grab this from input				passwordInput.text, //Password, want to grab this for input				successfulLogin,				failedLogin);					}				//Callback function called when login is successful		private function successfulLogin(client:Client):void 		{			trace("Sucessfully connected to player.io");						myClient = client;			//Set developmentsever (Comment out to connect to your server online)			client.multiplayer.developmentServer = "127.0.0.1:8184";			//Start Menu State			FlxG.switchState(new MenuState(myClient));						//Show lobby (parsing true hides the cancel button)			this.Hide(null);						usernameInput.visible = false;			passwordInput.visible = false;		}				//Callback function called when login has failed		private function failedLogin(error:PlayerIOError):void 		{			errorMessage.text = error.message		}			}	}